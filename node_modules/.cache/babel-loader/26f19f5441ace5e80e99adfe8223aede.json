{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/torus-embed';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, ADAPTER_EVENTS, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport log from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass TorusWalletAdapter extends BaseAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_EVM);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"torusInstance\", null);\n\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n\n    _defineProperty(this, \"initParams\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.torusInstance) {\n      return this.torusInstance.provider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    let network;\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n      const {\n        blockExplorer,\n        displayName\n      } = this.chainConfig;\n      network = {\n        chainId: 1,\n        host: \"mainnet\",\n        blockExplorer,\n        networkName: displayName\n      };\n    } else {\n      const {\n        chainId,\n        blockExplorer,\n        displayName,\n        rpcTarget\n      } = this.chainConfig;\n      network = {\n        chainId: parseInt(chainId, 16),\n        host: rpcTarget,\n        blockExplorer,\n        networkName: displayName\n      };\n    }\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_EVM);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with torus evm provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_EVM\n    });\n\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      const {\n        chainId\n      } = this.torusInstance.provider;\n\n      if (chainId && parseInt(chainId) !== parseInt(this.chainConfig.chainId, 16)) {\n        throw WalletInitializationError.fromCode(5000, \"Not connected to correct chainId. Expected: \".concat(this.chainConfig.chainId, \", Current: \").concat(chainId));\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_EVM,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_STATUS.ERRORED, error);\n      throw error instanceof Web3AuthError ? error : WalletLoginError.connectionError(\"Failed to login with torus wallet\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    this.torusInstance.hideTorusButton();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo(\"\");\n    return userInfo;\n  }\n\n  setAdapterSettings(_) {}\n\n}\n\nexport { TorusWalletAdapter };","map":{"version":3,"mappings":"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","names":["TorusWalletAdapter","BaseAdapter","constructor","params","WALLET_ADAPTERS","TORUS_EVM","ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","torusWalletOptions","adapterSettings","initParams","loginSettings","chainConfig","provider","status","CONNECTED","torusInstance","_","Error","init","options","checkInitializationRequirements","network","getChainConfig","blockExplorer","displayName","chainId","host","networkName","rpcTarget","parseInt","Torus","showTorusButton","READY","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","error","log","ERRORED","checkConnectionRequirements","WalletInitializationError","notReady","CONNECTING","adapter","login","fromCode","reconnected","Web3AuthError","WalletLoginError","connectionError","disconnect","cleanup","notConnectedError","logout","hideTorusButton","DISCONNECTED","getUserInfo","userInfo","setAdapterSettings"],"sources":["../src/torusWalletAdapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}