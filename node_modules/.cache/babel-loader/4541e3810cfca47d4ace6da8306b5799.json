{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MergedStore = void 0;\n\nconst ObservableStore_1 = require(\"./ObservableStore\");\n\nclass MergedStore extends ObservableStore_1.ObservableStore {\n  constructor() {\n    let children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    // Typecast: Preserve existing behavior\n    super({});\n    this._children = children; // subscribe to children\n\n    children.forEach(child => this._addChild(child));\n\n    this._updateWholeState();\n  }\n\n  _addChild(child) {\n    child.subscribe(() => this._updateWholeState());\n  }\n\n  _updateWholeState() {\n    const childStates = this._children.map(child => child.getState()); // apply shallow merge over states\n\n\n    const state = Object.assign({}, ...childStates);\n    this.putState(state);\n  }\n\n}\n\nexports.MergedStore = MergedStore;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA,MAAaA,WAAb,SAEUC,iCAFV,CAE4B;EAG1BC,cAAyB;IAAA,IAAbC,QAAa,uEAAF,EAAE;IACvB;IACA,MAAM,EAAN;IAEA,KAAKC,SAAL,GAAiBD,QAAjB,CAJuB,CAKvB;;IACAA,QAAQ,CAACE,OAAT,CAAkBC,KAAD,IAAW,KAAKC,SAAL,CAAeD,KAAf,CAA5B;;IACA,KAAKE,iBAAL;EACD;;EAEDD,SAAS,CAACD,KAAD,EAAmC;IAC1CA,KAAK,CAACG,SAAN,CAAgB,MAAM,KAAKD,iBAAL,EAAtB;EACD;;EAEDA,iBAAiB;IACf,MAAME,WAAW,GAAG,KAAKN,SAAL,CAAeO,GAAf,CAAoBL,KAAD,IAAWA,KAAK,CAACM,QAAN,EAA9B,CAApB,CADe,CAEf;;;IACA,MAAMC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,GAAGL,WAArB,CAAd;IACA,KAAKM,QAAL,CAAcH,KAAd;EACD;;AAtByB;;AAF5BI","names":["MergedStore","ObservableStore_1","constructor","children","_children","forEach","child","_addChild","_updateWholeState","subscribe","childStates","map","getState","state","Object","assign","putState","exports"],"sourceRoot":"","sources":["../src/MergedStore.ts"],"sourcesContent":["import { ObservableStore } from './ObservableStore';\n\nexport class MergedStore<\n  T extends Record<string, unknown>,\n> extends ObservableStore<T> {\n  private _children: ObservableStore<Partial<T>>[];\n\n  constructor(children = []) {\n    // Typecast: Preserve existing behavior\n    super({} as unknown as T);\n\n    this._children = children;\n    // subscribe to children\n    children.forEach((child) => this._addChild(child));\n    this._updateWholeState();\n  }\n\n  _addChild(child: ObservableStore<Partial<T>>): void {\n    child.subscribe(() => this._updateWholeState());\n  }\n\n  _updateWholeState(): void {\n    const childStates = this._children.map((child) => child.getState());\n    // apply shallow merge over states\n    const state = Object.assign({}, ...childStates);\n    this.putState(state);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}