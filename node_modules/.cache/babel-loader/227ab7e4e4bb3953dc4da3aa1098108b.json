{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObservableStore = void 0;\n\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\n\nclass ObservableStore extends safe_event_emitter_1.default {\n  constructor(initState) {\n    super();\n\n    if (initState) {\n      this._state = initState;\n    } else {\n      // Typecast/default state: Preserve existing behavior\n      this._state = {};\n    }\n  } // wrapper around internal getState\n\n\n  getState() {\n    return this._getState();\n  } // wrapper around internal putState\n\n\n  putState(newState) {\n    this._putState(newState);\n\n    this.emit('update', newState);\n  }\n\n  updateState(partialState) {\n    // if non-null object, merge\n    if (partialState && typeof partialState === 'object') {\n      const state = this.getState();\n      this.putState(Object.assign(Object.assign({}, state), partialState)); // if not object, use new value\n    } else {\n      this.putState(partialState);\n    }\n  } // subscribe to changes\n\n\n  subscribe(handler) {\n    this.on('update', handler);\n  } // unsubscribe to changes\n\n\n  unsubscribe(handler) {\n    this.removeListener('update', handler);\n  } //\n  // private\n  //\n  // read from persistence\n\n\n  _getState() {\n    return this._state;\n  } // write to persistence\n\n\n  _putState(newState) {\n    this._state = newState;\n  }\n\n}\n\nexports.ObservableStore = ObservableStore;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AAEA,MAAaA,eAAb,SAAwCC,4BAAxC,CAAwD;EAGtDC,YAAYC,SAAZ,EAAwB;IACtB;;IACA,IAAIA,SAAJ,EAAe;MACb,KAAKC,MAAL,GAAcD,SAAd;IACD,CAFD,MAEO;MACL;MACA,KAAKC,MAAL,GAAc,EAAd;IACD;EACF,CAXqD,CAatD;;;EACAC,QAAQ;IACN,OAAO,KAAKC,SAAL,EAAP;EACD,CAhBqD,CAkBtD;;;EACAC,QAAQ,CAACC,QAAD,EAAY;IAClB,KAAKC,SAAL,CAAeD,QAAf;;IACA,KAAKE,IAAL,CAAU,QAAV,EAAoBF,QAApB;EACD;;EAEDG,WAAW,CAACC,YAAD,EAAyB;IAClC;IACA,IAAIA,YAAY,IAAI,OAAOA,YAAP,KAAwB,QAA5C,EAAsD;MACpD,MAAMC,KAAK,GAAG,KAAKR,QAAL,EAAd;MACA,KAAKE,QAAL,CAAaO,gCAAMD,KAAN,GAAgBD,YAAhB,CAAb,EAFoD,CAGpD;IACD,CAJD,MAIO;MACL,KAAKL,QAAL,CAAcK,YAAd;IACD;EACF,CAjCqD,CAmCtD;;;EACAG,SAAS,CAACC,OAAD,EAA4B;IACnC,KAAKC,EAAL,CAAQ,QAAR,EAAkBD,OAAlB;EACD,CAtCqD,CAwCtD;;;EACAE,WAAW,CAACF,OAAD,EAA4B;IACrC,KAAKG,cAAL,CAAoB,QAApB,EAA8BH,OAA9B;EACD,CA3CqD,CA6CtD;EACA;EACA;EAEA;;;EACUV,SAAS;IACjB,OAAO,KAAKF,MAAZ;EACD,CApDqD,CAsDtD;;;EACUK,SAAS,CAACD,QAAD,EAAY;IAC7B,KAAKJ,MAAL,GAAcI,QAAd;EACD;;AAzDqD;;AAAxDY","names":["ObservableStore","safe_event_emitter_1","constructor","initState","_state","getState","_getState","putState","newState","_putState","emit","updateState","partialState","state","Object","subscribe","handler","on","unsubscribe","removeListener","exports"],"sourceRoot":"","sources":["../src/ObservableStore.ts"],"sourcesContent":["import SafeEventEmitter from '@metamask/safe-event-emitter';\n\nexport class ObservableStore<T> extends SafeEventEmitter {\n  private _state: T;\n\n  constructor(initState: T) {\n    super();\n    if (initState) {\n      this._state = initState;\n    } else {\n      // Typecast/default state: Preserve existing behavior\n      this._state = {} as unknown as T;\n    }\n  }\n\n  // wrapper around internal getState\n  getState(): T {\n    return this._getState();\n  }\n\n  // wrapper around internal putState\n  putState(newState: T): void {\n    this._putState(newState);\n    this.emit('update', newState);\n  }\n\n  updateState(partialState: Partial<T>): void {\n    // if non-null object, merge\n    if (partialState && typeof partialState === 'object') {\n      const state = this.getState();\n      this.putState({ ...state, ...partialState });\n      // if not object, use new value\n    } else {\n      this.putState(partialState);\n    }\n  }\n\n  // subscribe to changes\n  subscribe(handler: (state: T) => void): void {\n    this.on('update', handler);\n  }\n\n  // unsubscribe to changes\n  unsubscribe(handler: (state: T) => void): void {\n    this.removeListener('update', handler);\n  }\n\n  //\n  // private\n  //\n\n  // read from persistence\n  protected _getState(): T {\n    return this._state;\n  }\n\n  // write to persistence\n  protected _putState(newState: T): void {\n    this._state = newState;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}