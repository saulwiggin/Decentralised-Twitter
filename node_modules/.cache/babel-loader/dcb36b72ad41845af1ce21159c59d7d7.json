{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ComposedStore = void 0;\n\nconst ObservableStore_1 = require(\"./ObservableStore\");\n\nclass ComposedStore extends ObservableStore_1.ObservableStore {\n  constructor(children) {\n    // Typecast: Preserve existing behavior\n    super({}); // subscribe to children\n\n    this._children = children || {};\n    Object.keys(this._children).forEach(childKey => {\n      const child = this._children[childKey];\n\n      this._addChild(childKey, child);\n    });\n  }\n\n  _addChild(childKey, child) {\n    const updateFromChild = childValue => {\n      const state = this.getState();\n      state[childKey] = childValue;\n      this.putState(state);\n    };\n\n    child.subscribe(updateFromChild);\n    updateFromChild(child.getState());\n  }\n\n}\n\nexports.ComposedStore = ComposedStore;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA,MAAaA,aAAb,SAEUC,iCAFV,CAE4B;EAG1BC,YAAYC,QAAZ,EAAkE;IAChE;IACA,MAAM,EAAN,EAFgE,CAIhE;;IACA,KAAKC,SAAL,GAAiBD,QAAQ,IAAI,EAA7B;IACAE,MAAM,CAACC,IAAP,CAAY,KAAKF,SAAjB,EAA4BG,OAA5B,CAAqCC,QAAD,IAAa;MAC/C,MAAMC,KAAK,GAAG,KAAKL,SAAL,CAAeI,QAAf,CAAd;;MACA,KAAKE,SAAL,CAAeF,QAAf,EAAyBC,KAAzB;IACD,CAHD;EAID;;EAEDC,SAAS,CAACF,QAAD,EAAoBC,KAApB,EAAsD;IAC7D,MAAME,eAAe,GAAIC,UAAD,IAA2B;MACjD,MAAMC,KAAK,GAAG,KAAKC,QAAL,EAAd;MACAD,KAAK,CAACL,QAAD,CAAL,GAAkBI,UAAlB;MACA,KAAKG,QAAL,CAAcF,KAAd;IACD,CAJD;;IAMAJ,KAAK,CAACO,SAAN,CAAgBL,eAAhB;IACAA,eAAe,CAACF,KAAK,CAACK,QAAN,EAAD,CAAf;EACD;;AAxByB;;AAF5BG","names":["ComposedStore","ObservableStore_1","constructor","children","_children","Object","keys","forEach","childKey","child","_addChild","updateFromChild","childValue","state","getState","putState","subscribe","exports"],"sourceRoot":"","sources":["../src/ComposedStore.ts"],"sourcesContent":["import { ObservableStore } from './ObservableStore';\n\nexport class ComposedStore<\n  T extends Record<string, Record<string, unknown>>,\n> extends ObservableStore<T> {\n  private _children: Record<keyof T, ObservableStore<T[keyof T]>>;\n\n  constructor(children: Record<keyof T, ObservableStore<T[keyof T]>>) {\n    // Typecast: Preserve existing behavior\n    super({} as unknown as T);\n\n    // subscribe to children\n    this._children = children || {};\n    Object.keys(this._children).forEach((childKey) => {\n      const child = this._children[childKey];\n      this._addChild(childKey, child);\n    });\n  }\n\n  _addChild(childKey: keyof T, child: ObservableStore<T[keyof T]>) {\n    const updateFromChild = (childValue: T[keyof T]) => {\n      const state = this.getState();\n      state[childKey] = childValue;\n      this.putState(state);\n    };\n\n    child.subscribe(updateFromChild);\n    updateFromChild(child.getState());\n  }\n}\n"]},"metadata":{},"sourceType":"script"}